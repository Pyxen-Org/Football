from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler
import html

# Features import
from feedback import add_feedback_handlers


# ======================
# /start COMMAND
# ======================
def start(update: Update, context: CallbackContext):
    welcome_text = (
        "‚öΩ ùêñ·¥á ü·¥Ñ·¥è·¥ç·¥á T·¥è F·¥è·¥è·¥õ ô·¥Ä ü ü B·¥è·¥õ!\n\n"
        "üéÆ S·¥õ·¥á·¥ò ·¥è…¥·¥õ·¥è ·¥õ ú·¥á ·¥†…™ Ä·¥õ·¥ú·¥Ä ü ·¥ò…™·¥õ·¥Ñ ú, s·¥õ Ä·¥Ä·¥õ·¥á…¢…™·¥¢·¥á,  ô·¥ú…™ ü·¥Ö  è·¥è·¥ú Ä ·¥õ·¥á·¥Ä·¥ç, ·¥Ä…¥·¥Ö ·¥ò ü·¥Ä è ·¥ä·¥ús·¥õ  ü…™·¥ã·¥á …™…¥ ·¥Ä  Ä·¥á·¥Ä ü “ì·¥è·¥è·¥õ ô·¥Ä ü ü ·¥ç·¥Ä·¥õ·¥Ñ ú!\n\n"
        "üî• F Ä·¥á·¥á ·¥õ ú·¥á ·¥Ä·¥Ö Ä·¥á…¥·¥Ä ü…™…¥·¥á  Ä·¥ús ú ·¥Äs  è·¥è·¥ú s·¥Ñ·¥è Ä·¥á …¢·¥è·¥Ä üs, ·¥ç·¥Ä·¥ã·¥á s·¥ç·¥Ä Ä·¥õ ·¥ò ü·¥Ä ès, ·¥Ä…¥·¥Ö  Ä…™s·¥á ·¥õ·¥è ·¥õ ú·¥á ·¥õ·¥è·¥ò ·¥è“ì ·¥õ ú·¥á  ü·¥á·¥Ä·¥Ö·¥á Ä ô·¥è·¥Ä Ä·¥Ö.\n"
        "üèÜ T Ä·¥Ä…™…¥ - C·¥è·¥ç·¥ò·¥á·¥õ·¥á - C·¥è…¥«´·¥ú·¥á Ä\n\n"
        "T è·¥ò·¥á /help ·¥õ·¥è  ü·¥á·¥Ä Ä…¥  ú·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥Ä…¥·¥Ö ·¥ç·¥Äs·¥õ·¥á Ä ·¥õ ú·¥á …¢·¥Ä·¥ç·¥á!"
    )

    keyboard = [
        [
            InlineKeyboardButton("Support", url="https://t.me/YOUR_SUPPORT_LINK"),
            InlineKeyboardButton("Updates", url="https://t.me/YOUR_UPDATES_CHANNEL")
        ],
        [
            InlineKeyboardButton("Add bot to your group", url="https://t.me/footballbeta_bot?startgroup=true")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(welcome_text, reply_markup=reply_markup)


# ======================
# /help COMMAND
# ======================
def help_command(update: Update, context: CallbackContext):
    help_text = (
        "üèüÔ∏è Current Commands:\n\n"
        "- /newgame: to start the game.\n"
        "- /feedback: share your feedback to log/support group."
    )
    keyboard = [[InlineKeyboardButton("Alright!", callback_data="delete_help")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(help_text, reply_markup=reply_markup)

def rules_command(update: Update, context: CallbackContext):
    rules_text = (
        "Game Rules:-"
    )
    keyboard = [[InlineKeyboardButton("üéê I Understood!", callback_data="delete_rules")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(rules_text, reply_markup=reply_markup)


# ======================
# /newgame COMMAND
# ======================
def newgame_command(update: Update, context: CallbackContext):
    chat_type = update.effective_chat.type
    if chat_type == "private":
        update.message.reply_text("‚ö†Ô∏è Use /newgame in a group to start a game!")
        return

    text = "üéâ New Game Alert! üéâ\n\nWho will be the game host for this match? ü§î"
    keyboard = [[InlineKeyboardButton("üé≠ I'm the host!", callback_data="become_host")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(text, reply_markup=reply_markup)


# ======================
# CALLBACK HANDLER (single)
# ======================
def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user = query.from_user
    chat = query.message.chat

    if query.data == "delete_help":
        query.message.delete()

    if query.data == "delete_rules":
        query.message.delete()

if query.data == "become_host":
    # Check if the user is an admin
    member = chat.get_member(user.id)
    if member.status in ["administrator", "creator"]:
        # Escape the user's name like feedback.py
        safe_name = html.escape(user.first_name)

        # Edit the original message
        new_text = f"üéâ <a href='tg://user?id={user.id}'>{safe_name}</a> is now the game host! Create teams by using /create_teams. Let's get the match started"
        query.message.edit_text(new_text, parse_mode="HTML", reply_markup=None)
            
            # Show ephemeral popup
        query.answer(text="‚úÖ You are now the game host!", show_alert=True)
    else:
            # Not admin: ephemeral popup only
        query.answer(text="‚ùå You are not an admin! Ask a group admin to host.", show_alert=True)


# ======================
# MAIN FUNCTION
# ======================
def main():
    TOKEN = "8301290642:AAEUw6oa1C1fLIXPBpqRiIJjOYFhrG5sLco"
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # Add handlers
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("rules", rules_command))
    dp.add_handler(CommandHandler("newgame", newgame_command))


    # External Db import
    add_feedback_handlers(dp)
    dp.add_handler(CallbackQueryHandler(button_callback))  # single callback for all buttons

    print("‚öΩ Bot is running...")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
